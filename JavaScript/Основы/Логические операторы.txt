В JavaScript есть семь логических операторов:

|| (ИЛИ)
||= (Оператор логического присваивания ИЛИ)
&& (И)
&&= (Оператор логического присваивания И)
! (НЕ)
?? (Оператор нулевого слияния)
??= (Оператор нулевого присваивания)


Эти операторы могут применяться к значениям РАЗЛИЧНЫХ типов. 
Результаты также могут иметь различный тип


=========== || (ИЛИ) ===========

Возвращется первое истинное значение, либо последнее если все значения ложны

В случае с булевыми значениями, если один из операндов равен true — результат будет true
alert( true || true );   // true
alert( false || true );  // true
alert( true || false );  // true
alert( false || false ); // false

Если значение не логического типа — оно к нему приводится

Можно передать больше двух значений

Как работает || (ИЛИ): 
1. Операнды читаются слева направо
2. Преобразуются к логическому типу
3. Возвращается первое значение логического типа true.
4. Если нет true — возвращается последнее значение


=========== ||= (ЛОГИЧЕСКОЕ ПРИСВАИВАНИЕ ИЛИ) ===========

Синтаксис:
    a ||= b  эквивалентно  a || (a = b)

Алгоритм:
1. Вычисляются операнды слева направо
2. a преобразуется к логическому типу 
3. Если a = false — присваивает a значению 


=========== && (И) =========== 

Возвращает false если, хотя бы один из операндов false
Возвращает true если все операнды равны true

&& Возвращает первое ложное значение
Если все значение истинны, возвращает последнее

Приоритет && больше чем ||
Значит: 
    a && b || c && d    эквивалентно  (a && b) || (c && d)



=========== &&= (Логическое присваивание И) ===========

a &&= b  эквивалентно  a && (a = b);
a присвоится b, если a = true



===========  !(НЕ)  ===========

Оператор НЕ преобразовывает значение к логическому типу
    и возвращает противоположное значение:
alert( !true ); // false
alert( !0 ); // true


Замечание: ДВОЙНОЕ НЕ (!!) просто преобразовывает значение к логическому типу:
alert( !!"непустая строка" ); // true
alert( !!null ); // false

Можно также преобразовать значение с помощью Boolean()

Приоритет у ! выше, чем у && и ||
    Поэтому оператор НЕ выполнится раньше

